[
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "nest_asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nest_asyncio",
        "description": "nest_asyncio",
        "detail": "nest_asyncio",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "restructure_response",
        "importPath": "llm",
        "description": "llm",
        "isExtraImport": true,
        "detail": "llm",
        "documentation": {}
    },
    {
        "label": "regen_model_types",
        "importPath": "llm",
        "description": "llm",
        "isExtraImport": true,
        "detail": "llm",
        "documentation": {}
    },
    {
        "label": "regen_document_types",
        "importPath": "llm",
        "description": "llm",
        "isExtraImport": true,
        "detail": "llm",
        "documentation": {}
    },
    {
        "label": "get_available_models",
        "importPath": "ocr_models",
        "description": "ocr_models",
        "isExtraImport": true,
        "detail": "ocr_models",
        "documentation": {}
    },
    {
        "label": "process_image_with_model",
        "importPath": "ocr_models",
        "description": "ocr_models",
        "isExtraImport": true,
        "detail": "ocr_models",
        "documentation": {}
    },
    {
        "label": "get_document_configs",
        "importPath": "document_configs",
        "description": "document_configs",
        "isExtraImport": true,
        "detail": "document_configs",
        "documentation": {}
    },
    {
        "label": "get_document_configs",
        "importPath": "document_configs",
        "description": "document_configs",
        "isExtraImport": true,
        "detail": "document_configs",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "google.generativeai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.generativeai",
        "description": "google.generativeai",
        "detail": "google.generativeai",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "pytesseract",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytesseract",
        "description": "pytesseract",
        "detail": "pytesseract",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "TrOCRProcessor",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "VisionEncoderDecoderModel",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "Groq",
        "importPath": "groq",
        "description": "groq",
        "isExtraImport": true,
        "detail": "groq",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Mistral",
        "importPath": "mistralai",
        "description": "mistralai",
        "isExtraImport": true,
        "detail": "mistralai",
        "documentation": {}
    },
    {
        "label": "Reader",
        "importPath": "easyocr",
        "description": "easyocr",
        "isExtraImport": true,
        "detail": "easyocr",
        "documentation": {}
    },
    {
        "label": "LlamaParse",
        "importPath": "llama_parse",
        "description": "llama_parse",
        "isExtraImport": true,
        "detail": "llama_parse",
        "documentation": {}
    },
    {
        "label": "SimpleDirectoryReader",
        "importPath": "llama_index.core",
        "description": "llama_index.core",
        "isExtraImport": true,
        "detail": "llama_index.core",
        "documentation": {}
    },
    {
        "label": "OCRApp",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class OCRApp:\n    def __init__(self):\n        self.setup_page_config()\n        try:\n            load_dotenv()\n            logger.info(\"Environment variable loaded successfully\")            \n        except Exception as e:\n            logger.error(f\"Error setting API keys: {str(e)}\")\n        self.document_configs = get_document_configs()\n        self.initialize_session_state()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "logger = logging.getLogger(__name__)\nnest_asyncio.apply()\nclass OCRApp:\n    def __init__(self):\n        self.setup_page_config()\n        try:\n            load_dotenv()\n            logger.info(\"Environment variable loaded successfully\")            \n        except Exception as e:\n            logger.error(f\"Error setting API keys: {str(e)}\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "DocumentConfig",
        "kind": 6,
        "importPath": "document_configs",
        "description": "document_configs",
        "peekOfCode": "class DocumentConfig:\n    name: str\n    description: str\n    ocr_instruction: str\n    llm_instruction: str\n    preprocessing_defaults: Dict[str, Any]\n    recommended_models: list[str]\ndef get_document_configs() -> Dict[str, DocumentConfig]:\n    \"\"\"\n    Returns configurations for different document types.",
        "detail": "document_configs",
        "documentation": {}
    },
    {
        "label": "get_document_configs",
        "kind": 2,
        "importPath": "document_configs",
        "description": "document_configs",
        "peekOfCode": "def get_document_configs() -> Dict[str, DocumentConfig]:\n    \"\"\"\n    Returns configurations for different document types.\n    \"\"\"\n    return {\n        'log_notes': DocumentConfig(\n            name=\"Log Notes\",\n            description=\"Handwritten or typed log notes and records\",\n            ocr_instruction=\"\"\"This document contains log notes. Focus on identifying information, plans. Maintain the structure of the notes and present the result in strictly markdown format and use the tables if it's there in the document. Be especially careful with terms .Give the whole content of the document from the header to the footer\"\"\",\n            llm_instruction=\"\"\"Structure this log record with attention to:",
        "detail": "document_configs",
        "documentation": {}
    },
    {
        "label": "restructure_response",
        "kind": 2,
        "importPath": "llm",
        "description": "llm",
        "peekOfCode": "def restructure_response(result, llm_instruction):\n    logger.info(\"Starting restructure_response function\")\n    try:\n        genai.configure(api_key=os.environ[\"GEMINI_API_KEY\"])\n        logger.info(\"Gemini API configured\")\n    except Exception as e:\n        logger.error(f\"Error configuring Gemini API: {str(e)}\")\n        raise\n    generation_config = {\n        \"temperature\": 0.5,",
        "detail": "llm",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "llm",
        "description": "llm",
        "peekOfCode": "logger = logging.getLogger(__name__)\nload_dotenv()\nlogger.info(\"Setting up Gemini API key\")\n# os.environ[\"GEMINI_API_KEY\"] = os.getenv(\"GEMINI_API_KEY\")\nif not os.environ[\"GEMINI_API_KEY\"]:\n    logger.warning(\"Gemini API key is empty\")\nelse:\n    logger.info(\"Gemini API key set successfully\")\nregen_document_types = [\"medical_records\", \"log_notes\"]\nregen_model_types = [\"llama_parse_gemini_pro\", \"llama_parse_gemini_flash\", \"llama_parse_gpt4_mini\"]",
        "detail": "llm",
        "documentation": {}
    },
    {
        "label": "regen_document_types",
        "kind": 5,
        "importPath": "llm",
        "description": "llm",
        "peekOfCode": "regen_document_types = [\"medical_records\", \"log_notes\"]\nregen_model_types = [\"llama_parse_gemini_pro\", \"llama_parse_gemini_flash\", \"llama_parse_gpt4_mini\"]\ndef restructure_response(result, llm_instruction):\n    logger.info(\"Starting restructure_response function\")\n    try:\n        genai.configure(api_key=os.environ[\"GEMINI_API_KEY\"])\n        logger.info(\"Gemini API configured\")\n    except Exception as e:\n        logger.error(f\"Error configuring Gemini API: {str(e)}\")\n        raise",
        "detail": "llm",
        "documentation": {}
    },
    {
        "label": "regen_model_types",
        "kind": 5,
        "importPath": "llm",
        "description": "llm",
        "peekOfCode": "regen_model_types = [\"llama_parse_gemini_pro\", \"llama_parse_gemini_flash\", \"llama_parse_gpt4_mini\"]\ndef restructure_response(result, llm_instruction):\n    logger.info(\"Starting restructure_response function\")\n    try:\n        genai.configure(api_key=os.environ[\"GEMINI_API_KEY\"])\n        logger.info(\"Gemini API configured\")\n    except Exception as e:\n        logger.error(f\"Error configuring Gemini API: {str(e)}\")\n        raise\n    generation_config = {",
        "detail": "llm",
        "documentation": {}
    },
    {
        "label": "ModelConfig",
        "kind": 6,
        "importPath": "ocr_models",
        "description": "ocr_models",
        "peekOfCode": "class ModelConfig:\n    name: str\n    description: str\n    supports_document_types: list[str]\n    api_config: Optional[Dict[str, Any]] = None\ndef get_available_models() -> Dict[str, ModelConfig]:\n    \"\"\"\n    Returns a dictionary of available OCR models with their configurations.\n    \"\"\"\n    return {",
        "detail": "ocr_models",
        "documentation": {}
    },
    {
        "label": "OCRModelManager",
        "kind": 6,
        "importPath": "ocr_models",
        "description": "ocr_models",
        "peekOfCode": "class OCRModelManager:\n    def __init__(\n        self,\n        model_key: str,\n        document_type: str,\n        groq_api_key: Optional[str] = os.getenv(\"GROQ_API_KEY\"),\n        mistral_api_key: Optional[str] = os.getenv(\"MISTRAL_KEY\")\n    ):\n        \"\"\"\n        Initialize the OCR Model Manager.",
        "detail": "ocr_models",
        "documentation": {}
    },
    {
        "label": "get_available_models",
        "kind": 2,
        "importPath": "ocr_models",
        "description": "ocr_models",
        "peekOfCode": "def get_available_models() -> Dict[str, ModelConfig]:\n    \"\"\"\n    Returns a dictionary of available OCR models with their configurations.\n    \"\"\"\n    return {\n        'microsoft_trocr': ModelConfig(\n            name='Microsoft TrOCR',\n            description='Transformer-based OCR model optimized for handwritten text',\n            supports_document_types=['log_notes', 'legal_documents', 'medical_records', 'financial_records', 'general_config'],\n            api_config={",
        "detail": "ocr_models",
        "documentation": {}
    },
    {
        "label": "process_image_with_model",
        "kind": 2,
        "importPath": "ocr_models",
        "description": "ocr_models",
        "peekOfCode": "def process_image_with_model(\n    image: Image.Image,\n    model_key: str,\n    document_type: str\n) -> str:\n    \"\"\"\n    Process the image with the selected OCR model and document type.\n    Args:\n        image: PIL Image object\n        model_key: Key of the selected model",
        "detail": "ocr_models",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "ocr_models",
        "description": "ocr_models",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@dataclass\nclass ModelConfig:\n    name: str\n    description: str\n    supports_document_types: list[str]\n    api_config: Optional[Dict[str, Any]] = None\ndef get_available_models() -> Dict[str, ModelConfig]:\n    \"\"\"\n    Returns a dictionary of available OCR models with their configurations.",
        "detail": "ocr_models",
        "documentation": {}
    }
]